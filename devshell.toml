[devshell]
name = "shellscripts.nix"




[[commands]]
package = "cachixsh"
name = "cachix-push-flake-inputs"
category = "cachix.sh"
help = "push flake inputs to quyo-public.cachix.org"

[[commands]]
package = "cachixsh"
name = "cachix-push-flake-runtime-closures-all"
category = "cachix.sh"
help = "push all flake run-time closures to quyo-public.cachix.org"

[[commands]]
package = "cachixsh"
name = "cachix-push-flake-runtime-closure-single"
category = "cachix.sh"
help = "push run-time closure of a single flake attribute to quyo-public.cachix.org"

[[commands]]
package = "cachixsh"
name = "cachix-watch-exec"
category = "cachix.sh"
help = "watch execution of a single command and push all changes to quyo-public.cachix.org"

[[commands]]
package = "cachixsh"
name = "cachix-watch-store"
category = "cachix.sh"
help = "watch local nix store and push all changes to quyo-public.cachix.org"




[[commands]]
package = "dockersh"
name = "docker-cleanup"
category = "docker.sh"
help = "remove all unused images and volumes"

[[commands]]
package = "dockersh"
name = "docker-load-nix-build"
category = "docker.sh"
help = "build flake and load output into docker"

[[commands]]
package = "dockersh"
name = "docker-memory-top10"
category = "docker.sh"
help = "list containers with the highest memory usage"

[[commands]]
package = "dockersh"
name = "docker-pull-n-up"
category = "docker.sh"
help = "run docker-compose up after pulling"

[[commands]]
package = "dockersh"
name = "docker-tag-n-push"
category = "docker.sh"
help = "add version tag and push both :latest and :{TAG}"




[[commands]]
package = "matrixsh"
name = "matrix-ansible-check"
category = "matrix.sh"
help = "run self-check via ansible playbook"

[[commands]]
package = "matrixsh"
name = "matrix-ansible-fix-media-store"
category = "matrix.sh"
help = "stop all services, remove storage/media-store folder and start services again"

[[commands]]
package = "matrixsh"
name = "matrix-ansible-maintenance-postgres-vacuum"
category = "matrix.sh"
help = "run postgres-vacuum via ansible playbook and then start and check services"

[[commands]]
package = "matrixsh"
name = "matrix-ansible-registration-multitoken"
category = "matrix.sh"
help = "create a multiple-time use token, which expires in 14 days"

[[commands]]
package = "matrixsh"
name = "matrix-ansible-registration-singletoken"
category = "matrix.sh"
help = "create a one-time use token, which expires in 14 days"

[[commands]]
package = "matrixsh"
name = "matrix-ansible-update"
category = "matrix.sh"
help = "run setup-all,start via ansible playbook"

[[commands]]
package = "matrixsh"
name = "matrix-api-cli"
category = "matrix.sh"
help = "send https request including ${MATRIX_ACCESS_TOKEN} and pretty-print the response"

[[commands]]
package = "matrixsh"
name = "matrix-api-script"
category = "matrix.sh"
help = "send https request including ${MATRIX_ACCESS_TOKEN} with settings suitable for script usage"

[[commands]]
package = "matrixsh"
name = "matrix-postgres-mjolnir-reset-watchedlists"
category = "matrix.sh"
help = "reset watched_lists of the Mjolnir bot in the database"

[[commands]]
package = "matrixsh"
name = "matrix-postgres-relation-stats"
category = "matrix.sh"
help = "print relation statistics (top5 in number of rows and total size)"




[[commands]]
package = "miscsh"
name = "http-less"
category = "misc.sh"
help = "pretty-print a http request and the corresponding response"

[[commands]]
package = "miscsh"
name = "https-less"
category = "misc.sh"
help = "pretty-print a https request and the corresponding response"

[[commands]]
package = "miscsh"
name = "simplex-chat"
category = "misc.sh"
help = "run simplex-chat application"




[[commands]]
package = "nixsh"
name = "nix-cache-upload"
category = "nix.sh"
help = "build ./default.nix and upload to nix-cache-quyo-net.s3.eu-central-1.amazonaws.com"

[[commands]]
package = "nixsh"
name = "nix-cache-upload-flake"
category = "nix.sh"
help = "build flake and upload to nix-cache-quyo-net.s3.eu-central-1.amazonaws.com"

[[commands]]
package = "nixsh"
name = "nix-dependency-graph-at-buildtime"
category = "nix.sh"
help = "build and print the build-time dependency graph"

[[commands]]
package = "nixsh"
name = "nix-dependency-graph-at-runtime"
category = "nix.sh"
help = "build and print the run-time dependency graph"

[[commands]]
package = "nixsh"
name = "nix-fake"
category = "nix.sh"
help = "wrapper around nix-fakechannel-fakenix using same arbitrary flake for nixpkgs channel and nix included in the nix shell"

[[commands]]
package = "nixsh"
name = "nix-fakechannel"
category = "nix.sh"
help = "create on-the-fly a nixpkgs channel from an arbitrary flake and run any command"

[[commands]]
package = "nixsh"
name = "nix-fakechannel-fakenix"
category = "nix.sh"
help = "create on-the-fly a nixpkgs channel from an arbitrary flake and run any command in a nix shell with included nix from a second flake"

[[commands]]
package = "nixsh"
name = "nix-info"
category = "nix.sh"
help = "print name and description of a (q)nixpkgs attribute"

[[commands]]
package = "nixsh"
name = "nix-list-packages"
category = "nix.sh"
help = "list all matching packages in (q)nixpkgs (e.g. nix-list-packages '.*aa.*')"

[[commands]]
package = "nixsh"
name = "nix-list-subpackages"
category = "nix.sh"
help = "list all matching subpackages of an attribute in (q)nixpkgs (e.g. nix-list-subpackages python3Packages '.*aa.*')"

[[commands]]
package = "nixsh"
name = "nix-search"
category = "nix.sh"
help = "search for package names and descriptions in qnixpkgs"

[[commands]]
package = "nixsh"
name = "nix-system-cleanup"
category = "nix.sh"
help = "remove obsolete gcroots and run garbage collection"

[[commands]]
package = "nixsh"
name = "nix-system-update"
category = "nix.sh"
help = "update all packages in current profile"

[[commands]]
package = "nixsh"
name = "nix-tree-at-buildtime"
category = "nix.sh"
help = "explore the build-time dependency graph interactively"

[[commands]]
package = "nixsh"
name = "nix-tree-at-runtime"
category = "nix.sh"
help = "explore the run-time dependency graph interactively"




[[commands]]
package = "nixbuildsh"
name = "nixbuild-remote-store"
category = "nixbuild.sh"
help = "build flake in nixbuild.net remote store"

[[commands]]
package = "nixbuildsh"
name = "nixbuild-shell"
category = "nixbuild.sh"
help = "connect to nixbuild.net shell"




[[commands]]
package = "projectsh"
name = "project-init"
category = "project.sh"
help = "initialize a new project folder (nix, direnv, git, ...)"

[[commands]]
package = "projectsh"
name = "project-init-jupyter"
category = "project.sh"
help = "initialize a new tweag/jupyterWith folder"

[[commands]]
package = "projectsh"
name = "project-init-node-nest"
category = "project.sh"
help = "initialize a new node project with typescript, gulp, webpack and nest via npm"

[[commands]]
package = "projectsh"
name = "project-setup-fly-app-domain"
category = "project.sh"
help = "setup project subdomain at DigitalOcean and add TLS certs to Fly app"




[[commands]]
package = "quyosh"
name = "quyo-gitpull"
category = "quyo.sh"
help = "update /bootstrap.sh on all systems of the quyo federation"

[[commands]]
package = "quyosh"
name = "quyo-reboot"
category = "quyo.sh"
help = "reboot (almost) all systems of the quyo federation"

[[commands]]
package = "quyosh"
name = "quyo-runall"
category = "quyo.sh"
help = "run a command on all systems of the quyo federation"




[[commands]]
package = "resticsh"
name = "restic-backup"
category = "restic.sh"
help = "start a custom backup via restic"

[[commands]]
package = "resticsh"
name = "restic-backup-automatic-daily"
category = "restic.sh"
help = "start a daily backup via restic"

[[commands]]
package = "resticsh"
name = "restic-backup-automatic-hourly"
category = "restic.sh"
help = "start a hourly backup via restic"

[[commands]]
package = "resticsh"
name = "restic-exec"
category = "restic.sh"
help = "run custom command with default options via restic"

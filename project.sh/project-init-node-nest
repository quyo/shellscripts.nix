#!/bin/bash

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'


# create files from template
nix flake new -t github:quyo/qnixpkgs#node-nest-project .
rm -f package.json.example
rm -f package-lock.json.example

# create flake.lock
nix flake metadata >/dev/null

# initialize direnv
direnv allow

# initialize git
git init
git add .


# stage2: install all packages and tools
cat >__stage2 <<EOF
#! /usr/bin/env -S nix shell qnixpkgs#bash qnixpkgs#coreutils . -i -c bash

npm init -y

npm i -D typescript ts-node @types/node @tsconfig/node18-strictest-esm \
         gulp gulp-typescript del @types/gulp \
         webpack webpack-cli ts-loader html-webpack-plugin copy-webpack-plugin terser-webpack-plugin @types/webpack @types/html-webpack-plugin \
         babel-loader @babel/core @babel/preset-env @babel/preset-typescript \
         style-loader css-loader mini-css-extract-plugin css-minimizer-webpack-plugin \
         postcss postcss-loader autoprefixer postcss-import postcss-preset-env \
         node-sass sass-loader \
         less less-loader \
         husky lint-staged prettier \
         eslint eslint-config-prettier @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-plugin-import eslint-import-resolver-typescript \
         stylelint stylelint-config-standard stylelint-config-standard-scss stylelint-config-prettier stylelint-config-prettier-scss stylelint-config-recommended-less stylelint-less \
         nodemon \
         npm-run-all \
         @types/bootstrap @types/config @types/ejs @types/express @types/express-ejs-layouts @types/jquery

npm i express express-ejs-layouts ejs \
      @nestjs/core @nestjs/common @nestjs/platform-express @nestjs/testing rxjs reflect-metadata \
      config properties \
      bootstrap bootstrap-icons @popperjs/core jquery

npm pkg set main="./src/backend/app.ts"
npm pkg set type="module"

npm pkg set scripts.prepare:husky="husky install"
npm pkg set scripts.prepare="npm-run-all prepare:*"
npm pkg set scripts.pre-commit="lint-staged"
npm pkg set scripts.lint-eslint="eslint . --fix --cache --cache-strategy content"
npm pkg set scripts.lint-stylelint="stylelint 'src/frontend/**/*.{css,scss,sass,less}' --fix --cache --cache-strategy content"
npm pkg set scripts.lint="run-p lint-eslint lint-stylelint"
npm pkg set scripts.prettify_backend_onchange="true || fd --changed-within 1m . config/ src/backend/ --exec-batch prettier --write --cache --cache-strategy content --ignore-unknown --no-error-on-unmatched-pattern"
npm pkg set scripts.prettify_frontend_onchange="true || fd --changed-within 1m . src/frontend/ --exec-batch prettier --write --cache --cache-strategy content --ignore-unknown --no-error-on-unmatched-pattern"
npm pkg set scripts.prettify="prettier --write --cache --cache-strategy content --no-error-on-unmatched-pattern ."
npm pkg set scripts.clean="gulp clean"
npm pkg set scripts.build_backend:dev="NODE_ENV=development tsc"
npm pkg set scripts.build_backend:prod="NODE_ENV=production gulp backend"
npm pkg set scripts.build_frontend_assets="gulp frontend-assets"
npm pkg set scripts.build_frontend_views="gulp frontend-views"
npm pkg set scripts.build_frontend_compile:dev="webpack --mode development"
npm pkg set scripts.build_frontend_compile:prod="webpack --mode production"
npm pkg set scripts.build_frontend:dev="run-p build_frontend_assets build_frontend_views build_frontend_compile:dev"
npm pkg set scripts.build_frontend:prod="run-p build_frontend_assets build_frontend_views build_frontend_compile:prod"
npm pkg set scripts.build:dev="npm run clean && run-p build_backend:dev build_frontend:dev"
npm pkg set scripts.build:prod="npm run clean && run-p build_backend:prod build_frontend:prod"
npm pkg set scripts.serve:dev="NODE_ENV=development ts-node --transpile-only --experimental-specifier-resolution=node ./src/backend/app.ts"
npm pkg set scripts.serve:prod="NODE_ENV=production node --experimental-specifier-resolution=node ./dist/backend/app.js"
npm pkg set scripts.build_serve:dev="run-s build:dev serve:dev"
npm pkg set scripts.build_serve:prod="run-s build:prod serve:prod"
npm pkg set scripts.watch_backend="nodemon --watch config --watch src/backend -e ts,tsx,cts,mts,js,jsx,cjs,mjs,json,properties --exec run-s prettify_backend_onchange serve:dev"
npm pkg set scripts.watch_frontend_assets="nodemon --watch src/frontend/public -e '*' --ignore '**/*.{ts,tsx,cts,mts,js,jsx,cjs,mjs,css,scss,sass,less,html,htm}' --exec npm run build_frontend_assets"
npm pkg set scripts.watch_frontend_compile="nodemon --watch src/frontend/public -e ts,tsx,cts,mts,js,jsx,cjs,mjs,css,scss,sass,less,html,htm --exec run-s prettify_frontend_onchange build_frontend_compile:dev"
npm pkg set scripts.watch_frontend_views="nodemon --watch src/frontend/views -e '*' --exec run-s prettify_frontend_onchange build_frontend_views"
npm pkg set scripts.watch_frontend="run-p watch_frontend_assets watch_frontend_views watch_frontend_compile"
npm pkg set scripts.watch="npm run clean && run-p watch_backend watch_frontend"
npm pkg set scripts.dev="npm run watch"
npm pkg set scripts.prod="npm run build_serve:prod"
EOF

chmod +x __stage2
./__stage2
rm -f __stage2

# stage3: setup husky
cat >__stage3 <<EOF
#! /usr/bin/env -S nix shell . -c bash

npx husky install
npx husky add .husky/pre-commit "npm run pre-commit"
EOF

chmod +x __stage3
./__stage3
rm -f __stage3

# add all files
git add .
